drop table if exists movie CASCADE;
drop table if exists director CASCADE;
drop table if exists actor CASCADE;
drop table if exists movie_actor CASCADE;
drop table if exists review CASCADE;
drop table if exists review_like CASCADE;
drop table if exists site_user CASCADE;

create table movie
(
    id binary(16) not null,
    created_at timestamp(6),
    updated_at timestamp(6),
    code_fims varchar(50) not null,
    title varchar(255) not null,
    synopsis text,
    release_date date,
    prod_year integer,
    director_id binary(16),
    total_rating float(53),
    review_count integer,
    primary key (id)
);

create table director
(
    id binary(16) not null,
    created_at timestamp(6),
    updated_at timestamp(6),
    name varchar(255) not null,
    gender enum ('FEMALE','MALE','OTHER'),
    country varchar(50),
    primary key (id)
);

create table actor
(
    id binary(16) not null,
    created_at timestamp(6),
    updated_at timestamp(6),
    name varchar(255) not null,
    gender enum ('FEMALE','MALE','OTHER'),
    country varchar(50),
    primary key (id)
);

create table movie_actor
(
    id bigint generated by default as identity,
    created_at timestamp(6),
    updated_at timestamp(6),
    movie_id binary(16),
    actor_id binary(16),
    primary key (id)
);

create table review
(
    id binary(16) not null,
    created_at timestamp(6),
    updated_at timestamp(6),
    rating float,
    comment text,
    movie_id binary(16),
    user_id binary(16),
    likes integer,
    primary key (id)
);

create table review_like
(
    id bigint by default as identity,
    created_at timestamp(6),
    updated_at timestamp(6),
    user_id binary(16),
    review_id binary(16),
    primary key (id)
);

create table site_user
(
    id binary(16) not null,
    created_at timestamp(6),
    updated_at timestamp(6),
    email varchar(255) not null unique,
    password_hash varchar(255) not null,
    nickname varchar(255) not null,
    role enum ('ADMIN','USER'),
    primary key (id)
);

alter table if exists movie add constraint FK_MOVIE_DIRECTOR_ID foreign key (director_id) references director (id);
alter table if exists movie_actor add constraint FK_MOVIE_ACTOR_ACTOR_ID foreign key (actor_id) references actor (id);
alter table if exists movie_actor add constraint FK_MOVIE_ACTOR_MOVIE_ID foreign key (movie_id) references movie (id);
alter table if exists review add constraint FK_REVIEW_MOVIE_ID foreign key (movie_id) references movie (id);
alter table if exists review add constraint FK_REVIEW_USER_ID foreign key (user_id) references site_user (id);
alter table if exists review_like add constraint FK_REVIEW_LIKE_REVIEW_ID foreign key (review_id) references review (id);
alter table if exists review_like add constraint FK_REVIEW_LIKE_USER_ID foreign key (user_id) references site_user (id);
